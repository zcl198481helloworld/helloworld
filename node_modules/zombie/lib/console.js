"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

// Implements console.log, console.error, console.time, et al and emits a
// console event for each output.

var _require = require("util");

var format = _require.format;
var inspect = _require.inspect;

module.exports = (function () {
  function Console(browser) {
    _classCallCheck(this, Console);

    this.browser = browser;
  }

  Console.prototype.assert = function assert(truth) {
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (truth) {
      return;
    }var formatted = format.apply(undefined, [""].concat(args));
    var message = "Assertion failed: " + (formatted || "false");
    this.browser.emit("console", "error", message);
    throw new Error(message);
  };

  Console.prototype.count = function count(name) {
    if (!this.counters) this.counters = {};
    if (!this.counters[name]) this.counters[name] = 0;
    this.counters[name]++;
    var message = "" + name + ": " + this.counters[name];
    this.browser.emit("console", "log", message);
  };

  Console.prototype.debug = function debug() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.browser.emit("console", "debug", format.apply(undefined, args));
  };

  Console.prototype.error = function error() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.browser.emit("console", "error", format.apply(undefined, args));
  };

  Console.prototype.group = function group() {};

  Console.prototype.groupCollapsed = function groupCollapsed() {};

  Console.prototype.groupEnd = function groupEnd() {};

  Console.prototype.dir = function dir(object) {
    this.browser.emit("console", "log", inspect(object));
  };

  Console.prototype.info = function info() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.browser.emit("console", "log", format.apply(undefined, args));
  };

  Console.prototype.log = function log() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.browser.emit("console", "log", format.apply(undefined, args));
  };

  Console.prototype.time = function time(name) {
    if (!this.timers) this.timers = {};
    this.timers[name] = Date.now();
  };

  Console.prototype.timeEnd = function timeEnd(name) {
    if (this.timers) {
      var start = this.timers[name];
      delete this.timers[name];
      var message = "" + name + ": " + (Date.now() - start) + "ms";
      this.browser.emit("console", "log", message);
    }
  };

  Console.prototype.trace = function trace() {
    var error = new Error();
    var stack = error.stack.split("\n");
    stack[0] = "console.trace()";
    var message = stack.join("\n");
    this.browser.emit("console", "trace", message);
  };

  Console.prototype.warn = function warn() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    this.browser.emit("console", "log", format.apply(undefined, args));
  };

  return Console;
})();
//# sourceMappingURL=console.js.map