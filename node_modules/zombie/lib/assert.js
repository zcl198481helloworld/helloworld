"use strict";

var _classCallCheck = require("babel-runtime/helpers/class-call-check")["default"];

var _core = require("babel-runtime/core-js")["default"];

// Browser assertions convenience.

var assert = require("assert");

var _require = require("util");

var isRegExp = _require.isRegExp;

var URL = require("url");

// Used to assert that actual matches expected value, where expected may be a function or a string.
function assertMatch(actual, expected, message) {
  if (isRegExp(expected)) {
    assert(expected.test(actual), message || "Expected '" + actual + "' to match " + expected);
  } else if (typeof expected === "function") {
    assert(expected(actual), message);
  } else assert.deepEqual(actual, expected, message);
}

module.exports = (function () {
  function Assert(browser) {
    _classCallCheck(this, Assert);

    this.browser = browser;
  }

  // -- Location/response --

  // Asserts that a cookie with the given name has the expected value.
  //
  // identifier - Cookie name or name/domain/path (see getCookie)
  // expected   - Expected value (null to test cookie is not set)
  // message    - Assert message if cookie does not have expected value

  Assert.prototype.cookie = function cookie(identifier) {
    var expected = arguments[1] === undefined ? null : arguments[1];
    var message = arguments[2] === undefined ? null : arguments[2];

    var actual = this.browser.getCookie(identifier);
    assertMatch(actual, expected, message || "Expected cookie " + JSON.stringify(identifier) + " to have the value '" + expected + "', found '" + actual + "'");
  };

  // Asserts that browser was redirected when retrieving the current page.

  Assert.prototype.redirected = function redirected(message) {
    assert(this.browser.redirected, message);
  };

  // Assert that the last page load returned the expected status code.

  Assert.prototype.status = function status(code, message) {
    assert.equal(this.browser.statusCode, code, message);
  };

  // Assert that the last page load returned status code 200.

  Assert.prototype.success = function success(message) {
    assert(this.browser.success, message);
  };

  // Asserts that current page has the expected URL.
  //
  // Expected value can be a String, RegExp, Function or an object, in which case
  // object properties are tested against the actual URL (e.g. pathname, host,
  // query).

  Assert.prototype.url = function url(expected, message) {
    if (typeof expected === "string") {
      var absolute = URL.resolve(this.browser.location.href, expected);
      assertMatch(this.browser.location.href, absolute, message);
    } else if (isRegExp(expected) || typeof expected === "function") {
      assertMatch(this.browser.location.href, expected, message);
    } else {
      var url = URL.parse(this.browser.location.href, true);
      for (var key in expected) {
        var value = expected[key];
        // Gracefully handle default values, e.g. document.location.hash for
        // "/foo" is "" not null, not undefined.
        var defaultValue = key === "port" ? 80 : null;
        assertMatch(url[key] || defaultValue, value || defaultValue, message);
      }
    }
  };

  // -- Document contents --

  // Assert the named attribute of the selected element(s) has the expected value.

  Assert.prototype.attribute = function attribute(selector, name) {
    var expected = arguments[2] === undefined ? null : arguments[2];
    var message = arguments[3] === undefined ? null : arguments[3];

    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    for (var _iterator = elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var element = _ref;

      var actual = element.getAttribute(name);
      assertMatch(actual, expected, message);
    }
  };

  // Assert that element matching selector exists.

  Assert.prototype.element = function element(selector, message) {
    this.elements(selector, { exactly: 1 }, message);
  };

  // Assert how many elements matching selector exist.
  //
  // Count can be an exact number, or an object with the properties:
  // atLeast - Expect to find at least that many elements
  // atMost  - Expect to find at most that many elements
  // exactly - Expect to find exactly that many elements
  //
  // If count is unspecified, defaults to at least one.

  Assert.prototype.elements = function elements(selector, count, message) {
    var elements = this.browser.queryAll(selector);
    if (arguments.length == 1) {
      this.elements(selector, { atLeast: 1 });
    } else if (_core.Number.isInteger(count)) {
      this.elements(selector, { exactly: count }, message);
    } else {
      if (count.exactly) assert.equal(elements.length, count.exactly, message || "Expected " + count.exactly + " elements matching '" + selector + "', found " + elements.length);
      if (count.atLeast) assert(elements.length >= count.atLeast, message || "Expected at least " + count.atLeast + " elements matching '" + selector + "', found only " + elements.length);
      if (count.atMost) assert(elements.length <= count.atMost, message || "Expected at most " + count.atMost + " elements matching '" + selector + "', found " + elements.length);
    }
  };

  // Asserts the selected element(s) has the expected CSS class.

  Assert.prototype.hasClass = function hasClass(selector, expected, message) {
    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    for (var _iterator = elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var element = _ref;

      var classNames = element.className.split(/\s+/);
      assert(~classNames.indexOf(expected), message || "Expected element '" + selector + "' to have class " + expected + ", found " + classNames.join(", "));
    }
  };

  // Asserts the selected element(s) doest not have the expected CSS class.

  Assert.prototype.hasNoClass = function hasNoClass(selector, expected, message) {
    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    for (var _iterator = elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var element = _ref;

      var classNames = element.className.split(/\s+/);
      assert(classNames.indexOf(expected) === -1, message || "Expected element '" + selector + "' to not have class " + expected + ", found " + classNames.join(", "));
    }
  };

  // Asserts the selected element(s) has the expected class names.

  Assert.prototype.className = function className(selector, expected, message) {
    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    var array = expected.split(/\s+/).sort().join(" ");
    for (var _iterator = elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var element = _ref;

      var actual = element.className.split(/\s+/).sort().join(" ");
      assertMatch(actual, array, message || "Expected element '" + selector + "' to have class " + expected + ", found " + actual);
    }
  };

  // Asserts the selected element(s) has the expected value for the named style
  // property.

  Assert.prototype.style = (function (_style) {
    var _styleWrapper = function style(_x, _x2) {
      return _style.apply(this, arguments);
    };

    _styleWrapper.toString = function () {
      return _style.toString();
    };

    return _styleWrapper;
  })(function (selector, style) {
    var expected = arguments[2] === undefined ? null : arguments[2];
    var message = arguments[3] === undefined ? null : arguments[3];

    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    for (var _iterator = elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var element = _ref;

      var actual = element.style.getPropertyValue(style);
      assertMatch(actual, expected, message || "Expected element '" + selector + "' to have style " + style + " value of " + expected + ", found " + actual);
    }
  });

  // Asserts that selected input field (text field, text area, etc) has the expected value.

  Assert.prototype.input = function input(selector) {
    var expected = arguments[1] === undefined ? null : arguments[1];
    var message = arguments[2] === undefined ? null : arguments[2];

    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    for (var _iterator = elements, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var element = _ref;

      assertMatch(element.value, expected, message);
    }
  };

  // Asserts that a link exists with the given text and URL.

  Assert.prototype.link = function link(selector, text, url, message) {
    var _this = this;

    var elements = this.browser.queryAll(selector);
    assert(elements.length, message || "Expected selector '" + selector + "' to return one or more elements");
    var matchingText = elements.filter(function (element) {
      return element.textContent.trim() === text;
    });
    if (isRegExp(url)) {
      var matchedRegexp = matchingText.filter(function (element) {
        return url.test(element.href);
      });
      assert(matchedRegexp.length, message || "Expected at least one link matching the given text and URL");
    } else {
      (function () {
        var absolute = URL.resolve(_this.browser.location.href, url);
        var matchedURL = matchingText.filter(function (element) {
          return element.href === absolute;
        });
        assert(matchedURL.length, message || "Expected at least one link matching the given text and URL");
      })();
    }
  };

  // Assert that text content of selected element(s) matches expected string.
  //
  // You can also call this with a regular expression, or a function.

  Assert.prototype.text = function text(selector, expected, message) {
    var elements = this.browser.queryAll(selector);
    assert(elements.length, "Expected selector '" + selector + "' to return one or more elements");
    var actual = elements.map(function (elem) {
      return elem.textContent;
    }).join("").trim().replace(/\s+/g, " ");
    assertMatch(actual, expected || "", message);
  };

  // -- Window --

  // Asserts that selected element has the focus.

  Assert.prototype.hasFocus = function hasFocus(selector, message) {
    if (selector) {
      var elements = this.browser.queryAll(selector);
      assert.equal(elements.length, 1, message || "Expected selector '" + selector + "' to return one element");
      assert.equal(this.browser.activeElement, elements[0], message || "Expected element '" + selector + "' to have the focus'");
    } else {
      assert.equal(this.browser.activeElement, this.browser.body, message || "Expected no element to have focus");
    }
  };

  // -- JavaScript --

  // Evaluates Javascript expression and asserts value.  With one argument,
  // asserts that the expression evaluates to (JS) true.

  Assert.prototype.evaluate = function evaluate(expression, expected, message) {
    var actual = this.browser.evaluate(expression);
    if (arguments.length === 1) {
      assert(actual);
    } else {
      assertMatch(actual, expected, message);
    }
  };

  // Asserts that the global (window) property name has the expected value.

  Assert.prototype.global = function global(name, expected, message) {
    var actual = this.browser.window[name];
    if (arguments.length === 1) {
      assert(actual);
    } else {
      assertMatch(actual, expected, message || "Expected global " + name + " to have the value '" + expected + "', found '" + actual + "'");
    }
  };

  return Assert;
})();
//# sourceMappingURL=assert.js.map