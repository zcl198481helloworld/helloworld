"use strict";

// Support for iframes.

var DOM = require("./index");

// Support for iframes that load content when you set the src attribute.
var frameInit = DOM.HTMLFrameElement._init;
DOM.HTMLFrameElement._init = function () {
  frameInit.call(this);
  this.removeEventListener("DOMNodeInsertedIntoDocument", this._initInsertListener);

  var iframe = this;
  var parentWindow = iframe.ownerDocument.parentWindow;
  var contentWindow = null;

  Object.defineProperties(iframe, {
    contentWindow: {
      get: function get() {
        return contentWindow || createWindow();
      }
    },
    contentDocument: {
      get: function get() {
        return (contentWindow || createWindow()).document;
      }
    }
  });

  // URL created on the fly, or when src attribute set
  function createWindow() {
    var createHistory = require("../history");
    // Need to bypass JSDOM's window/document creation and use ours
    var open = createHistory(parentWindow.browser, function (active) {
      // Change the focus from window to active.
      contentWindow = active;
    });
    contentWindow = open({ name: iframe.name, parent: parentWindow, referrer: parentWindow.location.href });
    return contentWindow;
  }
};

// This is also necessary to prevent JSDOM from messing with window/document
DOM.HTMLFrameElement.prototype.setAttribute = function (name, value) {
  DOM.HTMLElement.prototype.setAttribute.call(this, name, value);
};

DOM.HTMLFrameElement.prototype._attrModified = function (name, value, oldValue) {
  var _this = this;

  if (name === "src" && value) {
    var _ret = (function () {
      var onload = function () {
        iframe.contentWindow.removeEventListener("load", onload);
        var event = ownerDocument.createEvent("HTMLEvents");
        event.initEvent("load", false, false);
        iframe.dispatchEvent(event);
      };

      var iframe = _this;
      var url = DOM.resourceLoader.resolve(iframe.ownerDocument, value);
      DOM.HTMLElement.prototype._attrModified.call(_this, name, url, oldValue);

      // Don't load IFrame twice
      if (iframe.contentWindow.location.href === url) return {
          v: undefined
        };

      var ownerDocument = iframe.ownerDocument;

      // Point IFrame at new location and wait for it to load
      iframe.contentWindow.location = url;
      // IFrame will load in a different window
      iframe.contentWindow.addEventListener("load", onload);
    })();

    if (typeof _ret === "object") return _ret.v;
  } else if (name === "name") {

    // Should be able to access parent.frames[name] -> this
    var windowName = value;
    var parentWindow = this.ownerDocument.parentWindow;

    var _ref = this;

    var contentWindow = _ref.contentWindow;

    contentWindow.name = windowName;
    delete parentWindow[oldValue];
    parentWindow.__defineGetter__(windowName, function () {
      return _this.contentWindow;
    });
  } else {
    DOM.HTMLFrameElement.prototype._attrModified.call(this, name, value, oldValue);
  }
};
//# sourceMappingURL=../dom/iframe.js.map