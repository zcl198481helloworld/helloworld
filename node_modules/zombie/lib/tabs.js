"use strict";

var _core = require("babel-runtime/core-js")["default"];

// Tab management.

var createHistory = require("./history");

module.exports = function createTabs(browser) {
  var tabs = [];
  var current = null;

  Object.defineProperties(tabs, {

    // current property has a fancy setter
    current: {
      get: function get() {
        return current;
      },
      set: function set(window) {
        window = tabs.find(window) || window;
        if (! ~tabs.indexOf(window)) {
          return;
        }if (window && window !== current) {
          if (current) browser.emit("inactive", current);
          current = window;
          browser.emit("active", current);
        }
      }
    },

    // Dump list of all open tabs to stdout or output stream.
    dump: {
      value: function value() {
        var output = arguments[0] === undefined ? process.stdout : arguments[0];

        if (tabs.length === 0) {
          output.write("No open tabs.\n");
        } else {
          for (var _iterator = tabs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
            var _ref;

            if (_isArray) {
              if (_i >= _iterator.length) break;
              _ref = _iterator[_i++];
            } else {
              _i = _iterator.next();
              if (_i.done) break;
              _ref = _i.value;
            }

            var _window = _ref;

            output.write("Window " + (_window.name || "unnamed") + " open to " + _window.location.href + "\n");
          }
        }
      }
    },

    // Opens and returns a tab.  If an open window by the same name already exists,
    // opens this window in the same tab.  Omit name or use '_blank' to always open
    // a new tab.
    //
    // name    - Window name (optional)
    // opener  - Opening window (window.open call)
    // referer - Referrer
    // url     - Set document location to this URL upon opening
    // html    - Document contents (browser.load)
    open: {
      value: function value() {
        var options = arguments[0] === undefined ? {} : arguments[0];
        var name = options.name;
        var url = options.url;

        // When window changes we need to change tab slot. We can't keep the index
        // around, since tab order changes, so we look up the currently known
        // active window and switch that around.
        var active = null;

        // If name window in open tab, reuse that tab. Otherwise, open new window.
        var named = name && this.find(name.toString());
        if (named) {
          // Select this as the currenly open tab. Changing the location would then
          // select a different window.
          tabs.current = named;
          if (url) current.location = url;
          return current;
        } else {
          if (name === "_blank" || !name) name = "";

          var _open = createHistory(browser, focus);
          options.url = url;
          var _window = _open(options);
          this.push(_window);
          if (name && (this.propertyIsEnumerable(name) || !this[name])) this[name] = _window;
          active = _window;
          // Select this as the currenly open tab
          tabs.current = _window;
          return _window;
        }

        function focus(window) {
          if (window && window !== active) {
            var index = tabs.indexOf(active);
            if (~index) tabs[index] = window;
            if (current === active) tabs.current = window;
            active = window;
          }
          browser.eventLoop.setActiveWindow(window);
        }
      }
    },

    // Index of currently selected tab.
    index: {
      get: function get() {
        return this.indexOf(current);
      }
    },

    // Returns window by index or name. Use this for window names that shadow
    // existing properties (e.g. tabs['open'] is a function, use
    find: {
      value: function value(name) {
        if (tabs.propertyIsEnumerable(name)) {
          return tabs[name];
        }for (var _iterator = this, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var _window = _ref;

          if (_window.name === name) {
            return _window;
          }
        }return null;
      }
    },

    // Close an open tab.  With no arguments, closes the currently open tab.  With
    // one argument, closes the tab for that window.  You can pass a window, window
    // name or index number.
    close: {
      value: function value(window) {
        if (!window) window = current;else window = this.find(window) || window;
        if (~this.indexOf(window)) window.close();
      }
    },

    // Closes all open tabs/windows.
    closeAll: {
      value: function value() {
        var windows = this.slice(0);
        for (var _iterator = windows, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _core.$for.getIterator(_iterator);;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var _window = _ref;

          _window.close();
        }
      }
    }

  });

  // We're notified when window is closed (by any means), and take that tab out
  // of circulation.
  browser.on("closed", function (window) {
    var index = tabs.indexOf(window);
    if (~index) {
      browser.emit("inactive", window);
      tabs.splice(index, 1);
      if (tabs.propertyIsEnumerable(window.name)) delete tabs[window.name];
      // If we closed the currently open tab, need to select another window.
      if (window === current) {
        // Don't emit inactive event for closed window.
        if (index > 0) current = tabs[index - 1];else current = tabs[0];
        if (current) browser.emit("active", current);
      }
    }
  });

  return tabs;
};
//# sourceMappingURL=tabs.js.map